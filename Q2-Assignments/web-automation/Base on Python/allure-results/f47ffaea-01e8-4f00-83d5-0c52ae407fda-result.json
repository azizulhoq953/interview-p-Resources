{"name": "test_navigation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x64eeac37610a <unknown>\n#1 0x64eeac05bd20 <unknown>\n#2 0x64eeac091122 <unknown>\n#3 0x64eeac08f569 <unknown>\n#4 0x64eeac0db5cb <unknown>\n#5 0x64eeac0cf213 <unknown>\n#6 0x64eeac09d2c5 <unknown>\n#7 0x64eeac09e2ce <unknown>\n#8 0x64eeac33fa4f <unknown>\n#9 0x64eeac343b36 <unknown>\n#10 0x64eeac32d4b7 <unknown>\n#11 0x64eeac3442d1 <unknown>\n#12 0x64eeac31479e <unknown>\n#13 0x64eeac365098 <unknown>\n#14 0x64eeac365298 <unknown>\n#15 0x64eeac374d31 <unknown>\n#16 0x74b818be5ac3 <unknown>", "trace": "@pytest.fixture\n    def setup():\n>       driver = webdriver.Chrome()\n\ntests/test_navigation.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\nvenv/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7a3d4fff8e50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#14 0x64eeac365298 \\\\u003Cunknown>\\\\n#15 0x64eeac374d31 \\\\u003Cunknown>\\\\n#16 0x74b818be5ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x64eeac37610a <unknown>\nE       #1 0x64eeac05bd20 <unknown>\nE       #2 0x64eeac091122 <unknown>\nE       #3 0x64eeac08f569 <unknown>\nE       #4 0x64eeac0db5cb <unknown>\nE       #5 0x64eeac0cf213 <unknown>\nE       #6 0x64eeac09d2c5 <unknown>\nE       #7 0x64eeac09e2ce <unknown>\nE       #8 0x64eeac33fa4f <unknown>\nE       #9 0x64eeac343b36 <unknown>\nE       #10 0x64eeac32d4b7 <unknown>\nE       #11 0x64eeac3442d1 <unknown>\nE       #12 0x64eeac31479e <unknown>\nE       #13 0x64eeac365098 <unknown>\nE       #14 0x64eeac365298 <unknown>\nE       #15 0x64eeac374d31 <unknown>\nE       #16 0x74b818be5ac3 <unknown>\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "start": 1725977861626, "stop": 1725977861626, "uuid": "bbbc659e-85ed-4af3-b7e7-4fd2e24eb5ba", "historyId": "797b73beb8b4c63c1065132e55ed2f19", "testCaseId": "05bd12bfa91776f04eabc54b3ae2e8b6", "fullName": "tests.test_navigation#test_navigation", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_navigation"}, {"name": "host", "value": "azizul-VivoBook-15-ASUS-Laptop-X540UAR"}, {"name": "thread", "value": "105199-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_navigation"}]}